#!/bin/bash

set -e

downloaded_scripts_dir="/tmp/otc-task-script-cache"

if [ -z "$repository_base_url" ]
then
	repository_base_url="https://raw.githubusercontent.com/OleConsignado/otc-vsts-agent-tasks"
fi

if ! [ -d "$downloaded_scripts_dir" ]
then
	mkdir "$downloaded_scripts_dir"
fi

function usage
{
	echo "Usage: "
	echo "   $0 [--always-download] [--debug] [--bash-login] [--download-only] version_path_segment script_path_segment [SCRIPT_ARGS ...]"
	echo "Example: "
	echo "   $0 v1 build.sh Debug"
}

always_download=false

if ! [ -z "$otc_task_always_download" ] && $otc_task_always_download
then # parent script called with --always-download
	always_download=true
fi

bash_debug=false
bash_login=false
download_only=false

# arguments handling
# based on https://gist.github.com/jehiah/855086#file-simple_args_parsing-sh
while [[ "$1" == "--"* ]]
do
	case "$1" in
		--always-download)
			always_download=true
			;;
		--debug)
			bash_debug=true			
			;;
		--bash-login)
			bash_login=true
			;;
		--download-only)
			download_only=true
			;;
		*)
			echo "Unknow parameter '$1'" >&2
			usage >&2
			exit 4
			;;
	esac
	shift
done

# Expose to be read on nested otc-task invokation
export otc_task_always_download=$always_download

version_path_segment="$1"
script_path_segment="$2"

if [ -z "$version_path_segment" ] || [ -z "$script_path_segment" ]
then
	usage >&2
	exit 3
fi

shift 2

# Expose version_path_segment in order to be used on nested otc-task invokation
export OTC_TASK_VERSION_PATH_SEGMENT=$version_path_segment

script_url="${repository_base_url}/$version_path_segment/$script_path_segment"
script_identifier=$(echo "$version_path_segment-$script_path_segment" | sed 's/[^a-zA-Z0-9.-]*//g')
script_url_sha1=$(echo $script_url | sha1sum -t | awk '{ print $1 }')
script_local_name="${script_identifier}-${script_url_sha1}"
script_full_path="${downloaded_scripts_dir}/$script_local_name"

if ! [ -f "$script_full_path" ] || $always_download
then
	if ! curl -f -s -H 'Cache-Control: no-cache, no-store, must-revalidate' "$script_url?n=$(date +%s)" \
		-o "$script_full_path"
	then
		echo "Error downloading '$script_url'." >&2
		exit 4
	fi
fi

if $download_only
then
	cat "$script_full_path"
else
	bash_args=""

	if $bash_login
	then
		bash_args="$bash_args -l"
	fi

	if $bash_debug
	then
		bash_args="$bash_args -x"
	fi	
	bash $bash_args "$script_full_path" "$@"
fi
